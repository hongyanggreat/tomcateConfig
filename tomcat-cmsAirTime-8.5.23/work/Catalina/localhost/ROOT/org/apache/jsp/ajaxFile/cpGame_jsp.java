/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.23
 * Generated at: 2017-12-12 02:37:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ajaxFile;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import com.htc.airtime.model.UserServices;
import com.htc.airtime.dao.UserServicesDAO;
import com.htc.airtime.components.Helper;
import com.htc.airtime.dao.AccountDAO;
import com.htc.airtime.model.Account;
import com.htc.airtime.components.Tool;
import com.htc.airtime.dao.UserServicesDAO;
import com.htc.airtime.model.UserServices;
import java.util.ArrayList;
import com.htc.airtime.model.Account;
import com.htc.airtime.dao.AccountDAO;

public final class cpGame_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/ajaxFile/../includes/checkLogin.jsp", Long.valueOf(1513046144000L));
    _jspx_dependants.put("/ajaxFile/../includes/airTime/infoSelect.jsp", Long.valueOf(1513046150000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.htc.airtime.components.Tool");
    _jspx_imports_classes.add("com.htc.airtime.components.Helper");
    _jspx_imports_classes.add("com.htc.airtime.model.UserServices");
    _jspx_imports_classes.add("com.htc.airtime.dao.UserServicesDAO");
    _jspx_imports_classes.add("com.htc.airtime.model.Account");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("com.htc.airtime.dao.AccountDAO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');

    String baseUrl = request.getContextPath();
    if (Tool.checkNull(session.getAttribute("acc"))) {
        try {
            response.sendRedirect("/login.jsp");
            return;
        } catch (Exception e) {
            System.out.println("CO LOI NHA");
        }
    }
    String nameUser = "";
    String cpCodeUser = "";
    String checkTypeUser = "";
    int idUser = 0;
    Account acc = null;
    if (!Tool.checkNull(session.getAttribute("acc"))) {
        acc = (Account) session.getAttribute("acc");
        idUser = acc.getAccId();
        nameUser = acc.getUserName();
        cpCodeUser = acc.getCpCode();
        checkTypeUser = AccountDAO.TYPE.getType(acc.getUserType()).toString();
    }

      out.write(' ');
      out.write('\n');
      out.write(' ');
      out.write("\n");
      out.write(" \n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
  //          
            AccountDAO accSearch = new AccountDAO();
            ArrayList<Account> dtsAccSearch = null;
            ArrayList<Account> arrAcc = null;

            UserServicesDAO userServicecSearch = new UserServicesDAO();
            ArrayList<UserServices> dtsCodeGameSearch = null;
            switch (checkTypeUser) {
                case "USER":
                    break;
                case "ADMIN":
                    dtsAccSearch = accSearch.getListByField("STATUS", 1);
                    dtsCodeGameSearch = userServicecSearch.getListByField("STATUS", 1);
                    break;
                case "AGENCY":
                    arrAcc = dtsAccSearch = accSearch.getListAgency(idUser, 1);
                    dtsCodeGameSearch = userServicecSearch.getListByField(dtsAccSearch);
                    break;
                case "AGENCY_MANAGER":
                    arrAcc = dtsAccSearch = accSearch.getListAgency(idUser, 1);
                    dtsCodeGameSearch = userServicecSearch.getListByField(dtsAccSearch);
                    break;
                default:
//            dtsAccSearch = accSearch.getListByField("STATUS", 1);
//            dtsSearch = userServicecSearch.getListByField("STATUS", 1);
                    break;
            }
        
      out.write('\n');
    boolean isPost = "POST".equals(request.getMethod());
    if (!isPost) {
        response.sendRedirect("/login.jsp");
        return;
    }
    UserServicesDAO userSv = new UserServicesDAO();

    ArrayList<UserServices> dts = null;
    if (Tool.checkNull(request.getParameter("cpCode"))) {
        response.sendRedirect("/login.jsp");
        return;
    }
    String cpCode = request.getParameter("cpCode");
    if(cpCode.equals("all")){
        dts = userSv.getListByField("1", "1",arrAcc);
    }else{
//        dts = userSv.getListByField("CP_CODE", cpCode);
        dts = userSv.getListByField("CP_CODE", cpCode,arrAcc);
    }
    if (dts != null && dts.size() > 0) {

      out.write("\n");
      out.write("<option value=\"all\">Chọn mã game</option>\n");

    for (UserServices dt : dts) {

      out.write("\n");
      out.write("<option value=\"");
      out.print( dt.getCodeGame());
      out.write("\" user=\"");
      out.print( dt.getUserName());
      out.write("\" cpCode=\"");
      out.print( dt.getCpCode());
      out.write("\" ak=\"");
      out.print( dt.getAccessKey());
      out.write('"');
      out.write(' ');
      out.write('>');
      out.print( dt.getCodeGame());
      out.write(' ');
      out.write('-');
      out.write(' ');
      out.print( dt.getGameName());
      out.write("</option>\n");
        }
} else {


      out.write("\n");
      out.write("<option value=\"all\">Không có dữ liệu</option>\n");
    }

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
